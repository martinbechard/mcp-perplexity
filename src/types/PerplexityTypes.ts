/*
* Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
* This software is licensed under the MIT License.
* File: /Users/martinbechard/dev/mcp-perplexity/src/types/PerplexityTypes.ts
* This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
*
* Type definitions for the Perplexity API
* Because any isn't a type, it's a warning sign! ⚠️
*/

import { z } from 'zod';

/**
 * Represents a message in the chat conversation
 */
export const MessageSchema = z.object({
    /** The role of the message sender */
    role: z.enum(['system', 'user', 'assistant']),
    
    /** The content of the message */
    content: z.string()
});

export type Message = z.infer<typeof MessageSchema>;

/**
 * Token usage statistics for the completion
 */
export const UsageSchema = z.object({
    /** Number of tokens in the prompt */
    prompt_tokens: z.number(),

    /** Number of tokens in the completion */
    completion_tokens: z.number(),

    /** Total tokens used */
    total_tokens: z.number()
});

export type Usage = z.infer<typeof UsageSchema>;

/**
 * Represents a single completion choice
 */
export const ChoiceSchema = z.object({
    /** Index of this choice in the array */
    index: z.number(),

    /** Reason why the model stopped generating */
    finish_reason: z.enum(['stop', 'length']),

    /** The generated message */
    message: MessageSchema,

    /** Streamed next tokens (only when streaming) */
    delta: z.object({
        role: z.string().optional(),
        content: z.string().optional()
    }).optional()
});

export type Choice = z.infer<typeof ChoiceSchema>;

/**
 * Response from the Perplexity chat completion API
 */
export const ChatCompletionResponseSchema = z.object({
    /** Unique identifier for the response */
    id: z.string(),

    /** Model used for completion */
    model: z.string(),

    /** Object type identifier */
    object: z.string(),

    /** Unix timestamp of creation */
    created: z.number(),

    /** Array of citation URLs used in response */
    citations: z.array(z.string()),

    /** Array of completion choices */
    choices: z.array(ChoiceSchema),

    /** Token usage statistics */
    usage: UsageSchema
});

export type ChatCompletionResponse = z.infer<typeof ChatCompletionResponseSchema>;
